version: 2

project_name: overseer
force_token: github

before:
  hooks:
    - go mod tidy
    - go generate ./...

builds:
  # Linux builds - CGO disabled for static linking
  - id: linux
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - amd64
      - arm64

  # macOS builds - CGO enabled for keychain access
  - id: darwin-amd64
    env:
      - CGO_ENABLED=1
    goos:
      - darwin
    goarch:
      - amd64
    flags:
      - -mod=readonly
    ldflags:
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
    hooks:
      post:
        - sh -c 'if [ -n "$CODESIGN_IDENTITY" ]; then codesign --sign "$CODESIGN_IDENTITY" --options runtime --entitlements entitlements.plist --timestamp --force --verbose "{{ .Path }}"; else echo "Skipping code signing (CODESIGN_IDENTITY not set)"; fi'
        - sh -c 'if [ -n "$APPLE_ID" ] && [ -n "$APPLE_APP_PASSWORD" ] && [ -n "$APPLE_TEAM_ID" ]; then echo "Notarizing {{ .Path }}..."; ditto -c -k --keepParent "{{ .Path }}" "{{ .Path }}.zip" && xcrun notarytool submit "{{ .Path }}.zip" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait && xcrun stapler staple "{{ .Path }}" && rm "{{ .Path }}.zip"; else echo "Skipping notarization (credentials not set)"; fi'

  - id: darwin-arm64
    env:
      - CGO_ENABLED=1
    goos:
      - darwin
    goarch:
      - arm64
    flags:
      - -mod=readonly
    ldflags:
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
    hooks:
      post:
        - sh -c 'if [ -n "$CODESIGN_IDENTITY" ]; then codesign --sign "$CODESIGN_IDENTITY" --options runtime --entitlements entitlements.plist --timestamp --force --verbose "{{ .Path }}"; else echo "Skipping code signing (CODESIGN_IDENTITY not set)"; fi'
        - sh -c 'if [ -n "$APPLE_ID" ] && [ -n "$APPLE_APP_PASSWORD" ] && [ -n "$APPLE_TEAM_ID" ]; then echo "Notarizing {{ .Path }}..."; ditto -c -k --keepParent "{{ .Path }}" "{{ .Path }}.zip" && xcrun notarytool submit "{{ .Path }}.zip" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait && xcrun stapler staple "{{ .Path }}" && rm "{{ .Path }}.zip"; else echo "Skipping notarization (credentials not set)"; fi'

archives:
  - formats: [tar.gz]
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}

changelog:
  sort: asc
  filters:
    # Commit messages matching the regexp listed here will be removed from
    # the changelog
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    exclude:
      - "^chore:"
      - typo
      - spelling
      - whitespace
  groups:
    - title: "Security updates"
      regexp: '^.*?sec(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Features"
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 100
    - title: "Bug fixes"
      regexp: '^.*?(fix|refactor)(\([[:word:]]+\))??!?:.+$'
      order: 200
    - title: Dependency updates
      regexp: '^.*?(feat|fix|chore)\(deps\)!?:.+$'
      order: 300
    - title: "Documentation updates"
      regexp: ^.*?docs?(\([[:word:]]+\))??!?:.+$
      order: 400
    - title: "Test updates"
      regexp: ^.*?test?(\([[:word:]]+\))??!?:.+$
      order: 500
    - title: "Build process updates"
      regexp: ^.*?(build|ci)(\([[:word:]]+\))??!?:.+$
      order: 600
    - title: Miscellaneous
      order: 9999

release:
  github:
    owner: davidolrik
    name: overseer
